# define the C compiler to use
CC = gcc

# define any compile-time flags
CFLAGS = -Wall -g

# define the C source files
SRCS = emitter.c error.c init.c lexer.c main.c symbol.c parser.c

# define the C object files
OBJS = $(SRCS:.c=.o)

# define the executable file
MAIN = mycc

#
# The following part of the makefile is generic; it can be used to
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

all:    $(MAIN)
  @echo  success message

$(MAIN): $(OBJS)
  $(CC) $(CFLAGS) -o $(MAIN) $(OBJS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file)
# (see the gnu make manual section about automatic variables)
.c.o:
  $(CC) $(CFLAGS) -c $<  -o $@

clean:
  $(RM) *.o *~ $(MAIN)
